//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/InputSystem/ShipPreviewActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ShipPreviewActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ShipPreviewActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ShipPreviewActions"",
    ""maps"": [
        {
            ""name"": ""Rotate"",
            ""id"": ""169b8c19-7564-4556-985c-56dcd0e8de04"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""1821bd4b-90be-40bb-8430-2446abc74877"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eae87718-5408-42be-8da3-bededf6ccb23"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MousePosition"",
            ""id"": ""40916855-1d5c-4473-9af9-a39d980168f0"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""9616fafa-46a0-4cbc-9fa4-3d282ad42b05"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b7a2a754-7a90-4001-8927-2bb24653ee80"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Rotate
        m_Rotate = asset.FindActionMap("Rotate", throwIfNotFound: true);
        m_Rotate_Rotate = m_Rotate.FindAction("Rotate", throwIfNotFound: true);
        // MousePosition
        m_MousePosition = asset.FindActionMap("MousePosition", throwIfNotFound: true);
        m_MousePosition_MousePosition = m_MousePosition.FindAction("MousePosition", throwIfNotFound: true);
    }

    ~@ShipPreviewActions()
    {
        UnityEngine.Debug.Assert(!m_Rotate.enabled, "This will cause a leak and performance issues, ShipPreviewActions.Rotate.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_MousePosition.enabled, "This will cause a leak and performance issues, ShipPreviewActions.MousePosition.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Rotate
    private readonly InputActionMap m_Rotate;
    private List<IRotateActions> m_RotateActionsCallbackInterfaces = new List<IRotateActions>();
    private readonly InputAction m_Rotate_Rotate;
    public struct RotateActions
    {
        private @ShipPreviewActions m_Wrapper;
        public RotateActions(@ShipPreviewActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_Rotate_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_Rotate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotateActions set) { return set.Get(); }
        public void AddCallbacks(IRotateActions instance)
        {
            if (instance == null || m_Wrapper.m_RotateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RotateActionsCallbackInterfaces.Add(instance);
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
        }

        private void UnregisterCallbacks(IRotateActions instance)
        {
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
        }

        public void RemoveCallbacks(IRotateActions instance)
        {
            if (m_Wrapper.m_RotateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRotateActions instance)
        {
            foreach (var item in m_Wrapper.m_RotateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RotateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RotateActions @Rotate => new RotateActions(this);

    // MousePosition
    private readonly InputActionMap m_MousePosition;
    private List<IMousePositionActions> m_MousePositionActionsCallbackInterfaces = new List<IMousePositionActions>();
    private readonly InputAction m_MousePosition_MousePosition;
    public struct MousePositionActions
    {
        private @ShipPreviewActions m_Wrapper;
        public MousePositionActions(@ShipPreviewActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_MousePosition_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_MousePosition; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MousePositionActions set) { return set.Get(); }
        public void AddCallbacks(IMousePositionActions instance)
        {
            if (instance == null || m_Wrapper.m_MousePositionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MousePositionActionsCallbackInterfaces.Add(instance);
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
        }

        private void UnregisterCallbacks(IMousePositionActions instance)
        {
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
        }

        public void RemoveCallbacks(IMousePositionActions instance)
        {
            if (m_Wrapper.m_MousePositionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMousePositionActions instance)
        {
            foreach (var item in m_Wrapper.m_MousePositionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MousePositionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MousePositionActions @MousePosition => new MousePositionActions(this);
    public interface IRotateActions
    {
        void OnRotate(InputAction.CallbackContext context);
    }
    public interface IMousePositionActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
